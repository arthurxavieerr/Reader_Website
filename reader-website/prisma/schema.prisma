generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================================
// USUÁRIOS
// ==================================

model User {
  id                   String   @id @default(cuid())
  name                 String
  email                String   @unique
  phone                String
  passwordHash         String
  salt                 String
  level                Int      @default(0)
  points               Int      @default(0)
  balance              Int      @default(0) // em centavos
  planType             PlanType @default(FREE)
  isAdmin              Boolean  @default(false)
  onboardingCompleted  Boolean  @default(false)
  commitment           Commitment?
  incomeRange          IncomeRange?
  profileImage         String?
  
  // Controle interno
  fraudScore           Int      @default(0) // 0-100
  isSuspended          Boolean  @default(false)
  suspendedReason      String?
  conversionAttempts   Int      @default(0)
  lastLoginIP          String?
  lastLoginAt          DateTime?
  
  // Timestamps
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Relacionamentos
  readingSessions      ReadingSession[]
  userBookRewards      UserBookReward[]
  reviews              Review[]
  transactions         Transaction[]
  withdrawals          Withdrawal[]
  posts                Post[]
  postLikes            PostLike[]
  comments             Comment[]
  adminLogs            AdminLog[]
  conversionMetrics    ConversionMetrics?
  
  @@map("users")
}

// ==================================
// LIVROS
// ==================================

model Book {
  id               String   @id @default(cuid())
  title            String   @unique
  author           String
  content          String   @db.Text
  synopsis         String   @db.Text
  genre            String
  coverImage       String?
  
  // Recompensas
  baseRewardMoney  Int      @default(150) // R$ 1,50 em centavos (base)
  rewardPoints     Int      @default(10)
  premiumMultiplier Int     @default(3)   // Premium ganha 3x mais
  
  // Configurações
  active           Boolean  @default(true)
  requiredLevel    Int      @default(0)
  estimatedReadTime Int     @default(600) // segundos
  wordCount        Int      @default(2000)
  pageCount        Int      @default(10)
  
  // Configuração especial
  isInitialBook    Boolean  @default(false) // Um dos 3 primeiros livros
  conversionBook   Boolean  @default(false) // Livro "isca" para conversão
  
  // Estatísticas
  reviewsCount     Int      @default(0)
  averageRating    Float    @default(0.0)
  totalReads       Int      @default(0)
  
  // Timestamps
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relacionamentos
  readingSessions  ReadingSession[]
  userBookRewards  UserBookReward[]
  reviews          Review[]
  bookContent      BookContent[]
  
  @@map("books")
}

// Conteúdo paginado dos livros
model BookContent {
  id       String @id @default(cuid())
  bookId   String
  page     Int
  content  String @db.Text
  wordCount Int   @default(0)
  
  book     Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  
  @@unique([bookId, page])
  @@map("book_content")
}

// ==================================
// SISTEMA ANTI-FRAUDE E TRACKING
// ==================================

model ReadingSession {
  id                String   @id @default(cuid())
  userId            String
  bookId            String
  
  // Tempos de leitura
  startTime         DateTime @default(now())
  endTime           DateTime?
  totalTime         Int      @default(0) // milissegundos
  activeTime        Int      @default(0) // milissegundos
  idleTime          Int      @default(0) // milissegundos
  
  // Comportamento de leitura
  averageScrollSpeed Float   @default(0)
  readingSpeed       Float   @default(0) // palavras por minuto
  tabSwitches        Int     @default(0)
  totalPageViews     Int     @default(0)
  backtrackCount     Int     @default(0)
  
  // Anti-fraude
  isValid            Boolean @default(false)
  fraudScore         Int     @default(0) // 0-100
  fraudReasons       String[]
  decision           FraudDecision @default(PENDING)
  
  // Recompensa
  canReceiveReward   Boolean @default(false)
  rewardProcessed    Boolean @default(false)
  
  // Relacionamentos
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  book               Book    @relation(fields: [bookId], references: [id], onDelete: Cascade)
  pageViews          PageView[]
  scrollEvents       ScrollEvent[]
  
  @@map("reading_sessions")
}

model PageView {
  id              String         @id @default(cuid())
  sessionId       String
  page            Int
  timestamp       DateTime       @default(now())
  timeSpent       Int            @default(0) // milissegundos
  scrollDepth     Float          @default(0) // % da página vista (0-100)
  wordsOnPage     Int            @default(0)
  
  session         ReadingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@map("page_views")
}

model ScrollEvent {
  id              String         @id @default(cuid())
  sessionId       String
  timestamp       DateTime       @default(now())
  scrollPosition  Int
  scrollDirection String         // 'up' | 'down'
  scrollSpeed     Float          @default(0) // pixels por segundo
  
  session         ReadingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@map("scroll_events")
}

// ==================================
// CONTROLE DE RECOMPENSAS ÚNICAS
// ==================================

model UserBookReward {
  id                 String   @id @default(cuid())
  userId             String
  bookId             String
  
  hasReceivedReward  Boolean  @default(false)
  readingAttempts    Int      @default(0)
  firstReadingDate   DateTime @default(now())
  validReadingDate   DateTime?
  fraudAttempts      Int      @default(0)
  
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  book               Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  
  @@unique([userId, bookId])
  @@map("user_book_rewards")
}

// ==================================
// SISTEMA DE CONVERSÃO FREEMIUM
// ==================================

model ConversionMetrics {
  id                  String   @id @default(cuid())
  userId              String   @unique
  
  popupViews          Int      @default(0)
  upgradeAttempts     Int      @default(0)
  lastUpgradePrompt   DateTime @default(now())
  conversionDate      DateTime?
  abandonmentReasons  String[]
  
  // Tracking de comportamento
  balanceLimitHits    Int      @default(0) // Quantas vezes bateu no limite de R$ 15
  withdrawalAttempts  Int      @default(0) // Tentativas de saque sem saldo suficiente
  
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("conversion_metrics")
}

// ==================================
// AVALIAÇÕES E REVIEWS
// ==================================

model Review {
  id             String   @id @default(cuid())
  userId         String
  bookId         String
  rating         Int      // 1-5
  comment        String?  @db.Text
  donationAmount Int?     @default(0) // em centavos
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  book           Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  
  @@unique([userId, bookId])
  @@map("reviews")
}

// ==================================
// SISTEMA FINANCEIRO
// ==================================

model Transaction {
  id            String           @id @default(cuid())
  userId        String
  type          TransactionType
  amount        Int              // em centavos
  status        TransactionStatus @default(PENDING)
  description   String
  
  // Metadata
  sourceId      String?          // ID da origem (reading session, withdrawal, etc)
  sourceType    String?          // 'reading', 'withdrawal', 'bonus', etc
  
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("transactions")
}

model Withdrawal {
  id            String           @id @default(cuid())
  userId        String
  amount        Int              // em centavos
  pixKey        String
  pixKeyType    PixKeyType
  status        WithdrawalStatus @default(PENDING)
  
  requestedAt   DateTime         @default(now())
  processedAt   DateTime?
  failureReason String?
  transactionId String?          // ID do Mercado Pago
  
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("withdrawals")
}

// ==================================
// COMUNIDADE E POSTS
// ==================================

model Post {
  id            String    @id @default(cuid())
  userId        String
  content       String    @db.Text
  likesCount    Int       @default(0)
  commentsCount Int       @default(0)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes         PostLike[]
  comments      Comment[]
  
  @@map("posts")
}

model PostLike {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([postId, userId])
  @@map("post_likes")
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  content   String   @db.Text
  createdAt DateTime @default(now())
  
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("comments")
}

// ==================================
// LOGS ADMINISTRATIVOS
// ==================================

model AdminLog {
  id          String     @id @default(cuid())
  adminId     String
  adminName   String
  action      AdminAction
  targetId    String?
  targetType  String?
  details     String?    @db.Text
  ipAddress   String
  userAgent   String     @db.Text
  timestamp   DateTime   @default(now())
  
  admin       User       @relation(fields: [adminId], references: [id], onDelete: Cascade)
  
  @@map("admin_logs")
}

// ==================================
// ENUMS
// ==================================

enum PlanType {
  FREE
  PREMIUM
}

enum Commitment {
  COMMITTED
  CURIOUS
}

enum IncomeRange {
  LOW
  MEDIUM
  HIGH
  UNEMPLOYED
}

enum FraudDecision {
  PENDING
  APPROVED
  REJECTED
  MANUAL_REVIEW
}

enum TransactionType {
  EARNING
  WITHDRAWAL
  BONUS
  CONVERSION
  REFUND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum WithdrawalStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum PixKeyType {
  CPF
  EMAIL
  PHONE
  RANDOM
}

enum AdminAction {
  VIEW_USER
  EDIT_USER
  SUSPEND_USER
  DELETE_USER
  VIEW_BOOK
  EDIT_BOOK
  ACTIVATE_BOOK
  DEACTIVATE_BOOK
  APPROVE_WITHDRAWAL
  REJECT_WITHDRAWAL
  VIEW_WITHDRAWAL
  VIEW_ANALYTICS
  EXPORT_DATA
  MODIFY_SETTINGS
  VIEW_LOGS
}