// prisma/schema.prisma - VERSÃO ATUALIZADA COM CPF OBRIGATÓRIO
generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USUÁRIOS
// ============================================
model User {
  id                   String   @id @default(cuid())
  name                 String
  email                String   @unique
  phone                String?
  cpf                  String   @unique // CAMPO CPF OBRIGATÓRIO E ÚNICO
  passwordHash         String?
  salt                 String?
  level                Int      @default(0)
  points               Int      @default(0)
  balance              Int      @default(0) // em centavos
  planType             PlanType @default(FREE)
  isAdmin              Boolean  @default(false)
  onboardingCompleted  Boolean  @default(false)
  commitment           Commitment?
  incomeRange          IncomeRange?
  profileImage         String?
  
  // Controle interno
  fraudScore           Int      @default(0)
  isSuspended          Boolean  @default(false)
  suspendedReason      String?
  conversionAttempts   Int      @default(0)
  lastLoginIP          String?
  lastLoginAt          DateTime?
  
  // Timestamps
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Relacionamentos
  transactions         Transaction[]
  planPurchases        PlanPurchase[]
  
  @@map("users")
}

// ============================================
// LIVROS
// ============================================
model Book {
  id               String   @id @default(cuid())
  title            String   @unique
  author           String
  content          String?  @db.Text
  synopsis         String?  @db.Text
  genre            String
  coverImage       String?
  baseRewardMoney  Int      @default(1000) // em centavos
  rewardPoints     Int      @default(100)
  requiredLevel    Int      @default(0)
  estimatedReadTime Int     @default(480) // em segundos
  wordCount        Int      @default(1000)
  pageCount        Int      @default(1)
  reviewsCount     Int      @default(0)
  averageRating    Float    @default(0.0)
  totalReads       Int      @default(0)
  isInitialBook    Boolean  @default(false)
  active           Boolean  @default(true)
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@map("books")
}

// ============================================
// TRANSAÇÕES E PAGAMENTOS
// ============================================
model Transaction {
  id                     String             @id @default(cuid())
  userId                 String
  type                   TransactionType
  status                 TransactionStatus  @default(PENDING)
  amount                 Int                // em centavos
  currency               String             @default("BRL")
  
  // Dados do PIX/Pagamento (para saques)
  pixKey                 String?
  pixKeyType             PixKeyType?
  
  // Dados do NivusPay (para depósitos)
  nivusPayTransactionId  String?            // ID da transação na Nivuspay
  nivusPayCustomId       String?            // ID customizado enviado para Nivuspay
  nivusPayStatus         String?            // Status retornado pela Nivuspay
  pixData                Json?              // QR Code, copia e cola, etc.
  
  // Dados para saque
  bankAccount            Json?              // Dados bancários para saque
  adminNotes             String?            // Observações do admin
  processedBy            String?            // ID do admin que processou
  processedAt            DateTime?
  
  // Timestamps
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  
  // Relacionamentos
  user                   User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("transactions")
}

model PlanPurchase {
  id                 String             @id @default(cuid())
  userId             String
  planType           PlanType
  amount             Int                // em centavos
  status             TransactionStatus  @default(PENDING)
  
  // Dados do pagamento
  pixQrCode          String?
  nivusPayId         String?            @unique
  nivusPayResponse   Json?
  
  // Ativação manual pelo admin
  activatedBy        String?            // ID do admin que ativou
  activatedAt        DateTime?
  adminNotes         String?
  
  // Timestamps
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  
  // Relacionamentos
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("plan_purchases")
}

// ============================================
// ENUMS
// ============================================
enum PlanType {
  FREE
  PREMIUM
}

enum Commitment {
  COMMITTED
  CURIOUS
}

enum IncomeRange {
  LOW
  MEDIUM
  HIGH
  UNEMPLOYED
}

enum TransactionType {
  DEPOSIT      // Depósito via PIX (R$ 19,90 ou R$ 39,90)
  WITHDRAWAL   // Saque
  REWARD       // Recompensa por livro
  BONUS        // Bônus do sistema
  REFUND       // Reembolso
}

enum TransactionStatus {
  PENDING      // Aguardando pagamento/processamento
  PROCESSING   // Em processamento
  COMPLETED    // Concluído
  FAILED       // Falhou
  CANCELLED    // Cancelado
  REJECTED     // Rejeitado (admin)
}

enum PixKeyType {
  CPF
  EMAIL
  PHONE
  RANDOM
}